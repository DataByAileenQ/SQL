# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

# Then I inserted the Spotify Data .csv into the table.

# Next, I explored the data using the following SQL. 

# First, I determined the energy and danceability of the top 10 most popular songs.
SELECT track_name, energy, danceability
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

# Next, I explored the least popular songs to see how their energy and danceability compare.
SELECT track_name, energy, danceability
FROM Spotifydata
ORDER BY popularity ASC
LIMIT 10;

# I then analyzed the average energy and loudness of songs based on popularity levels.
SELECT CASE WHEN popularity > 90 THEN 'High Popularity'
            WHEN popularity > 70 THEN 'Mid Popularity'
            ELSE 'Low Popular'
       END AS 'popularity_level',
       AVG(energy), 
       AVG(loudness)
FROM Spotifydata
GROUP BY popularity_level;

# I focused on collaboration tracks and analyzed their energy and mood (valence).
SELECT artist_name, track_name, energy, valence
FROM Spotifydata
WHERE track_name NOT LIKE '%(feat.%'
AND track_name NOT LIKE '%(with%'
ORDER BY energy DESC;

# Finally, I examined the correlation between energy and loudness across different artists
SELECT artist_name, energy, loudness
FROM Spotifydata
ORDER BY energy DESC;
